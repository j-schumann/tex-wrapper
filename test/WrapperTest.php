<?php

/**
 * @copyright   (c) 2017, Vrok
 * @license     MIT License (http://www.opensource.org/licenses/mit-license.php)
 * @author      Jakob Schumann <schumann@vrok.de>
 */

namespace VrokTest;

use PHPUnit\Framework\TestCase;
use TexWrapper\Wrapper;

/**
 * Tests that the TexWrapper can be configured as wanted, generates PDF files
 * from LaTeX and cleans up after himself.
 *
 * Requires pdflatex to be installed, e.g. with texlive-latex-base on debian.
 */
class WrapperTest extends TestCase
{
    protected $validTex = '\documentclass{article}
        \begin{document}
        \title{Introduction to \LaTeX{}}
        \author{Author Name}
        \maketitle
        \section{Introduction}
        Here is the text of your introduction.
        \end{document}';

    protected $invalidTex = '\documentclass{article}
        \begin{document}
        \title{Introduction to \LaTeX{}}
        \author{Author Name}
        \maketitle
        \section{Introduction}
        Here is the text of your introduction.
        \errors
        \end{document}';

    public function testSetsFilename()
    {
        $wrapper = new Wrapper('customname');
        $this->assertEquals($wrapper->getFilename(), 'customname');
    }

    public function testGetCommand()
    {
        $wrapper = new Wrapper();
        $this->assertEquals($wrapper->getCommand(), 'pdflatex --file-line-error');
    }

    public function testCanSaveTex()
    {
        $wrapper = new Wrapper('cansavetex');

        $result = $wrapper->saveTex($this->validTex);
        $this->assertEquals($result, true);
        $this->assertFileExists('cansavetex');
        $this->assertEquals(file_get_contents('cansavetex'), $this->validTex);

        $wrapper->deleteTex();
    }

    public function canDeleteTex()
    {
        $wrapper = new Wrapper('candeletetex');

        $wrapper->saveTex($this->validTex);
        $this->assertFileExists('candeletetex');
        $wrapper->deleteTex();
        $this->assertFileNotExists('candeletetex');
    }

    public function testAutodeleteTex()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->validTex);
        $file = $wrapper->getFilename();
        $this->assertFileExists($file);

        $wrapper = null;
        $this->assertFileNotExists($file);
    }

    public function testWrongCommand()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->validTex);
        $wrapper->setCommand('invalidcommand');

        $result = $wrapper->buildPdf();
        $this->assertEquals($result, false);

        $errors = $wrapper->getErrors();
        $this->assertEquals($errors, [
            'pdflatex' => 'Pdflatex is not installed or not within the $PATH!',
        ]);
    }

    public function testCanBuildPdf()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->validTex);

        $result = $wrapper->buildPdf();
        $this->assertEquals($result, true);

        $errors = $wrapper->getErrors();
        $this->assertEquals($errors, []);

        $this->assertEquals($wrapper->getPdfFile(), $wrapper->getFilename().'.pdf');
        $this->assertFileExists($wrapper->getFilename().'.pdf');
        $this->assertGreaterThan(0, filesize($wrapper->getPdfFile()));

        $this->assertGreaterThan(0, strlen($wrapper->getLog()));
    }

    public function testDeletesAdditionalFiles()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->validTex);
        $file = $wrapper->getFilename();

        touch($file.'.aux');
        touch($file.'.log');
        touch($file.'.out');
        touch(dirname($file).DIRECTORY_SEPARATOR.'missfont.log');
        touch(dirname($file).DIRECTORY_SEPARATOR.'texput.log');

        $wrapper->buildPdf();

        $this->assertFileNotExists($file.'.aux');
        $this->assertFileNotExists($file.'.log');
        $this->assertFileNotExists($file.'.out');
        $this->assertFileNotExists(dirname($file).DIRECTORY_SEPARATOR.'missfont.log');
        $this->assertFileNotExists(dirname($file).DIRECTORY_SEPARATOR.'texput.log');
    }

    public function testReturnsMissfonts()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->validTex);
        $file = $wrapper->getFilename();

        // how can we ensure a missfont.log is generated by using tex?
        // pdfTeX, Version 3.14159265-2.6-1.40.15 (TeX Live 2015/dev/Debian)
        // shows warnings for missing fonts but does not generate the file
        file_put_contents(
            dirname($file).DIRECTORY_SEPARATOR.'missfont.log',
            'a-font-is-missing'
        );

        $wrapper->buildPdf();
        $this->assertEquals($wrapper->getErrors(), [
            'missingFonts' => 'a-font-is-missing',
        ]);
    }

    /**
     * Tests that error messages are set when PDF generation fails, e.g. due to
     * missing TeX file.
     */
    public function testBuildSetsErrors()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->validTex);

        $wrapper->deleteTex();
        $result = $wrapper->buildPdf();
        $this->assertEquals($result, false);

        $errors = $wrapper->getErrors();
        $this->assertInternalType('array', $errors);
        $this->assertArrayHasKey('pdflatex', $errors);
        $this->assertInternalType('string', $errors['pdflatex']);
        $this->assertGreaterThan(0, strlen($errors['pdflatex']));

        $this->assertEquals($wrapper->getLog(), $errors['pdflatex']);
    }

    /**
     * Test that pdflatex still builds a broken TeX file but returns an error
     * code > 0 and thus sets the error messages.
     */
    public function testInvalidTexSetsErrors()
    {
        $wrapper = new Wrapper();
        $wrapper->saveTex($this->invalidTex);

        $result = $wrapper->buildPdf();
        $this->assertEquals($result, true);

        $errors = $wrapper->getErrors();
        $this->assertInternalType('array', $errors);
        $this->assertArrayHasKey('pdflatex', $errors);
        $this->assertInternalType('string', $errors['pdflatex']);
        $this->assertGreaterThan(0, strlen($errors['pdflatex']));

        $this->assertEquals($wrapper->getLog(), $errors['pdflatex']);
    }
}
